substitutions:
  _CLUSTER_NAME: mieszkaniownik-prod-cluster
  _CLUSTER_ZONE: europe-central2-a
  _NAMESPACE: production
  _IMAGE_NAME: mieszkaniownik-frontend
  _HELM_RELEASE: mieszkaniownik-frontend
  _ARTIFACT_REGISTRY: europe-west3-docker.pkg.dev
  _REPOSITORY: mieszkaniownik-repo

options:
  logging: CLOUD_LOGGING_ONLY
  machineType: "E2_HIGHCPU_8"
  dynamicSubstitutions: true

steps:
  - name: "gcr.io/cloud-builders/gcloud"
    id: "get-secrets"
    entrypoint: "bash"
    args:
      - "-c"
      - |
        set -e
        echo "Fetching secrets..."
        VITE_API_BASE_URL=$$(gcloud secrets versions access latest --secret=vite-api-url-prod --project=$PROJECT_ID)
        VITE_GOOGLE_MAPS_API_KEY=$$(gcloud secrets versions access latest --secret=google-maps-api-key-prod --project=$PROJECT_ID)
        echo "VITE_API_BASE_URL=$$VITE_API_BASE_URL" > /workspace/.env.build
        echo "VITE_GOOGLE_MAPS_API_KEY=$$VITE_GOOGLE_MAPS_API_KEY" >> /workspace/.env.build
        echo "Secrets retrieved successfully"
        echo "API URL: $$VITE_API_BASE_URL"
        echo "Maps API Key (first 20 chars): $${VITE_GOOGLE_MAPS_API_KEY:0:20}..."

  - name: "gcr.io/cloud-builders/docker"
    id: "build-image"
    entrypoint: "bash"
    args:
      - "-c"
      - |
        set -e
        source /workspace/.env.build
        echo "Building with VITE_API_BASE_URL=$$VITE_API_BASE_URL"
        echo "Building with VITE_GOOGLE_MAPS_API_KEY (first 20 chars)=$${VITE_GOOGLE_MAPS_API_KEY:0:20}..."
        docker build \
          --tag=${_ARTIFACT_REGISTRY}/$PROJECT_ID/${_REPOSITORY}/${_IMAGE_NAME}:$SHORT_SHA \
          --tag=${_ARTIFACT_REGISTRY}/$PROJECT_ID/${_REPOSITORY}/${_IMAGE_NAME}:latest \
          --tag=${_ARTIFACT_REGISTRY}/$PROJECT_ID/${_REPOSITORY}/${_IMAGE_NAME}:${BRANCH_NAME}-latest \
          --build-arg=VITE_API_BASE_URL=$$VITE_API_BASE_URL \
          --build-arg=VITE_GOOGLE_MAPS_API_KEY=$$VITE_GOOGLE_MAPS_API_KEY \
          --build-arg=NODE_ENV=production \
          --cache-from=${_ARTIFACT_REGISTRY}/$PROJECT_ID/${_REPOSITORY}/${_IMAGE_NAME}:latest \
          .
    waitFor: ["get-secrets"]

  - name: "gcr.io/cloud-builders/docker"
    id: "push-image"
    args:
      - "push"
      - "${_ARTIFACT_REGISTRY}/$PROJECT_ID/${_REPOSITORY}/${_IMAGE_NAME}:$SHORT_SHA"
    waitFor: ["build-image"]

  - name: "gcr.io/cloud-builders/docker"
    id: "push-latest"
    args:
      - "push"
      - "${_ARTIFACT_REGISTRY}/$PROJECT_ID/${_REPOSITORY}/${_IMAGE_NAME}:latest"
    waitFor: ["build-image"]

  - name: "gcr.io/cloud-builders/docker"
    id: "push-branch-latest"
    args:
      - "push"
      - "${_ARTIFACT_REGISTRY}/$PROJECT_ID/${_REPOSITORY}/${_IMAGE_NAME}:${BRANCH_NAME}-latest"
    waitFor: ["build-image"]

  - name: "gcr.io/cloud-builders/gcloud"
    id: "get-credentials"
    args:
      - "container"
      - "clusters"
      - "get-credentials"
      - "${_CLUSTER_NAME}"
      - "--zone=${_CLUSTER_ZONE}"
      - "--project=$PROJECT_ID"
    waitFor: ["push-branch-latest"]

  - name: "gcr.io/$PROJECT_ID/helm"
    id: "helm-deploy"
    entrypoint: "bash"
    args:
      - "-c"
      - |
        # Debug: Check workspace contents
        echo "Current directory: $(pwd)"
        echo "Workspace contents:"
        ls -la
        echo "Looking for helm-chart-frontend:"
        ls -la helm-chart-frontend/ || echo "helm-chart-frontend not found!"
        
        helm upgrade --install ${_HELM_RELEASE} /workspace/helm-chart-frontend \
          --namespace=${_NAMESPACE} \
          --create-namespace \
          --values=/workspace/helm-chart-frontend/values.yaml \
          --values=/workspace/helm-chart-frontend/values-prod.yaml \
          --set=frontend.image.repository=${_ARTIFACT_REGISTRY}/$PROJECT_ID/${_REPOSITORY}/${_IMAGE_NAME} \
          --set=frontend.image.tag=$SHORT_SHA \
          --set=global.imageRegistry= \
          --wait \
          --timeout=10m
    waitFor: ["get-credentials"]

  - name: "gcr.io/cloud-builders/kubectl"
    id: "verify-deployment"
    env:
      - "CLOUDSDK_COMPUTE_ZONE=${_CLUSTER_ZONE}"
      - "CLOUDSDK_CONTAINER_CLUSTER=${_CLUSTER_NAME}"
    args:
      - "rollout"
      - "status"
      - "deployment/${_HELM_RELEASE}"
      - "-n"
      - "${_NAMESPACE}"
      - "--timeout=5m"
    waitFor: ["helm-deploy"]

images:
  - "${_ARTIFACT_REGISTRY}/$PROJECT_ID/${_REPOSITORY}/${_IMAGE_NAME}:$SHORT_SHA"
  - "${_ARTIFACT_REGISTRY}/$PROJECT_ID/${_REPOSITORY}/${_IMAGE_NAME}:latest"
  - "${_ARTIFACT_REGISTRY}/$PROJECT_ID/${_REPOSITORY}/${_IMAGE_NAME}:${BRANCH_NAME}-latest"

timeout: "1800s"

tags:
  - "mieszkaniownik-frontend"
  - "${BRANCH_NAME}"
  - "$SHORT_SHA"
