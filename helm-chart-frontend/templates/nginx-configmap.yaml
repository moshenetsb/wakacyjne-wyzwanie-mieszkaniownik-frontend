{{- if and .Values.frontend.nginx.enabled .Values.frontend.nginx.configMap.enabled }}
apiVersion: v1
kind: ConfigMap
metadata:
  name: {{ include "mieszkaniownik-frontend.nginxConfigName" . }}
  labels:
    {{- include "mieszkaniownik-frontend.labels" . | nindent 4 }}
data:
  nginx.conf: |
    user nginx;
    worker_processes auto;
    error_log /var/log/nginx/error.log warn;
    pid /var/run/nginx.pid;

    events {
        worker_connections 1024;
    }

    http {
        include /etc/nginx/mime.types;
        default_type application/octet-stream;
        
        log_format main '$remote_addr - $remote_user [$time_local] "$request" '
                        '$status $body_bytes_sent "$http_referer" '
                        '"$http_user_agent" "$http_x_forwarded_for"';
        
        access_log /var/log/nginx/access.log main;
        
        sendfile on;
        tcp_nopush on;
        tcp_nodelay on;
        keepalive_timeout 65;
        types_hash_max_size 2048;
        client_max_body_size {{ .Values.frontend.nginx.configMap.clientMaxBodySize | default "10M" }};
        
        {{- if .Values.frontend.nginx.configMap.gzipEnabled }}
        gzip on;
        gzip_vary on;
        gzip_min_length 1024;
        gzip_proxied any;
        gzip_comp_level 6;
        gzip_types
            text/plain
            text/css
            text/xml
            text/javascript
            application/json
            application/javascript
            application/xml+rss
            application/atom+xml
            image/svg+xml;
        {{- end }}
        
        server {
            listen {{ .Values.frontend.service.targetPort }};
            server_name {{ .Values.frontend.nginx.configMap.serverName | default "localhost" }};
            
            root /usr/share/nginx/html;
            index index.html;
            
            # Security headers
            add_header X-Frame-Options "SAMEORIGIN" always;
            add_header X-Content-Type-Options "nosniff" always;
            add_header X-XSS-Protection "1; mode=block" always;
            add_header Referrer-Policy "strict-origin-when-cross-origin" always;
            add_header Content-Security-Policy "default-src 'self'; script-src 'self' 'unsafe-inline' 'unsafe-eval' https://maps.googleapis.com https://maps.gstatic.com https://*.googleapis.com; style-src 'self' 'unsafe-inline' https://fonts.googleapis.com https://maps.googleapis.com https://maps.gstatic.com; font-src 'self' https://fonts.gstatic.com data:; img-src 'self' data: https: blob:; connect-src 'self' {{ .Values.config.api.baseUrl | default "http://localhost:5001" }} https://maps.googleapis.com https://*.googleapis.com; frame-src 'self'; base-uri 'self'; form-action 'self'; worker-src 'self' blob:;" always;
            
            # Handle client-side routing
            location / {
                try_files $uri $uri/ /index.html;
            }
            
            # Cache static assets
            location ~* \.(js|css|png|jpg|jpeg|gif|ico|svg|woff|woff2|ttf|eot)$ {
                expires 1y;
                add_header Cache-Control "public, immutable";
            }
            
            # Health check endpoint
            location /health {
                access_log off;
                return 200 "healthy\n";
                add_header Content-Type text/plain;
            }
        }
    }
{{- end }}